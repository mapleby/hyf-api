export default (() => { const _00000000_ = new Object; var _00000001_ = 0; class _00000010_ { get [Symbol.toStringTag]() { return "HyfAPI"; }; constructor(_00000010_) { (() => { _00000001_++; let random = Math.floor(Math.random() * 1e6); this._00000000_ = `${random}${_00000001_}`; _00000000_[this._00000000_] = { _00000000_: new Object, _00000001_: new Object, _00000010_: new Object, _00000011_: new Array } })(); if (!this.isObject(_00000010_)) { const _00000000_ = new Error("Config is not an object, config needs an object."); return console.error.apply(console, this.printf(_00000000_)); }; if (!this.isObject(_00000010_.args)) { const _00000000_ = new Error("Config.args is not an object, config.args needs an object."); return console.error.apply(console, this.printf(_00000000_)); } _00000000_[this._00000000_]._00000000_ = new Object({ ..._00000010_.args }); _00000000_[this._00000000_]._00000011_.concat(Object.keys(_00000010_.args)); if (!Array.isArray(_00000010_.set)) { const _00000000_ = new Error("Config.set must be an array"); return console.error.apply(console, this.printf(_00000000_)); } (() => { let _00000100_ = 0; for (let _00000011_ of _00000010_.set) { _00000100_++; if (typeof _00000011_.name !== "string") { const _00000000_ = `Set[${_00000100_ - 1}].name must be a string, otherwise it will be ignored`; const _00000001_ = new Error(_00000000_); console.error.apply(console, this.printf(_00000001_)); continue; }; if (_00000000_[this._00000000_]._00000001_[_00000011_.name] !== undefined) { const warn = `Set.name[${_00000011_.name}] has duplicate name, the previous one will be overwritten`; console.warn.apply(console, this.printf(warn)); } if (typeof _00000011_.api !== "function") { const _00000000_ = `Set.api[${_00000011_.name}] must be a function, otherwise it will be ignored`; const _00000001_ = new Error(_00000000_); console.error.apply(console, this.printf(_00000001_)); continue; } _00000000_[this._00000000_]._00000001_[_00000011_.name] = async (..._00000100_) => { const _00000010_ = _00000011_.api(); if (!this.isObject(_00000010_, "Promise")) { const _00000000_ = `Set.api[${_00000011_.name}] return value must be a Promise object`; const _00000001_ = new Error(_00000000_); return console.error.apply(console, this.printf(_00000001_)); } _00000000_[this._00000000_]._00000010_[_00000011_.name] = async (..._00000101_) => { const _00000100_ = await _00000010_; if (!_00000100_ || typeof _00000100_.default !== "function") { const _00000000_ = `Set.api[${_00000011_.name}] Module not obtained,` + "please execute with import() and return the promise object of import()"; const _00000001_ = new Error(_00000000_); return console.error.apply(console, this.printf(_00000001_)); } const _00000110_ = [_00000000_[this._00000000_]._00000000_].concat(_00000101_); return _00000100_.default.apply(this, _00000110_); }; return _00000000_[this._00000000_]._00000010_[_00000011_.name].apply(this, _00000100_); } } })(); }; isObject(_00000000_, _00000001_ = "Object") { if (Array.isArray(_00000000_)) return false; if (typeof _00000000_ !== "object") return false; if (_00000000_.toString() !== `[object ${_00000001_}]`) return false; return true; }; printf(_00000000_, ..._00000001_) { const _00000010_ = [`%c HyfAPI ${_00000000_}`, "color:#fff;background:#0072ff"]; return _00000010_.concat(_00000001_); }; request(_00000100_, ..._00000011_) { if (_00000000_[this._00000000_]._00000010_[_00000100_]) { return _00000000_[this._00000000_]._00000010_[_00000100_].apply(this, _00000011_); } if (_00000000_[this._00000000_]._00000001_[_00000100_]) { return _00000000_[this._00000000_]._00000001_[_00000100_].apply(this, _00000011_); } const _00000001_ = `API method of ${_00000100_} does not exist`; const _00000010_ = new Error(_00000001_); console.error.apply(console, this.printf(_00000010_)); }; use(_00000010_, _00000001_, _00000100_) { if (_00000000_[this._00000000_]._00000011_.some(arg => arg === _00000010_)) { const _00000000_ = `${_00000010_} parameters already exist and are immutable types`; const _00000001_ = new Error(_00000000_); return console.error.apply(console, this.printf(_00000001_)); } if (typeof _00000100_ === "boolean" && _00000100_) { _00000000_[this._00000000_]._00000011_.push(_00000100_); } _00000000_[this._00000000_]._00000000_[_00000010_] = _00000001_; } };_00000010_.prototype. _00000000_ = 0; return _00000010_; })();